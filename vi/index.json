[
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/2/2.1/",
	"title": "Chuẩn bị hạ tầng",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị hạ tầng Để thực hiện bài lab này, chúng ta cần chuẩn bị các bước sau để chuẩn hạ tầng như VPC, Security Group, Database RDS cho Application và EC2 instance.\nTạo VPC Tạo Security Group cho EC2 Tạo Security Group cho Database RDS Tạo Database Subnet Group Tạo Database Instance Tạo EC2 instance Kết nối DB instance Các bạn có thể tham khảo các bước chuẩn bị của bài TRIỂN KHAI ỨNG DỤNG TRÊN DOCKER CONTAINER "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/1/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Nhiều tổ chức, công ty đã và đang chuyển sang thực hành DevOps, là sự kết hợp của các triết lý, thực tiễn và công cụ văn hóa nhằm tăng khả năng cung cấp ứng dụng và dịch vụ của tổ chức bạn ở tốc độ cao; ví dụ, phát triển và cải tiến sản phẩm với tốc độ nhanh hơn so với các tổ chức sử dụng quy trình quản lý cơ sở hạ tầng và phát triển phần mềm truyền thống.\nMột phần không thể thiếu của DevOps là áp dụng văn hóa tích hợp liên tục và phân phối / triển khai liên tục (CI / CD), trong đó cam kết hoặc thay đổi đối với mã đi qua các cổng giai đoạn tự động khác nhau, tất cả các cách từ xây dựng và thử nghiệm đến triển khai ứng dụng, từ phát triển đến môi trường sản xuất.\nBài lab này sử dụng bộ AWS của các dịch vụ CI / CD để biên dịch, xây dựng và cài đặt ứng dụng Nodejs được kiểm soát theo instance trên một tập hợp các Linux Amazon Elastic Compute Cloud (Amazon EC2) instance thông qua một đường dẫn hoàn toàn tự động và an toàn. Mục tiêu là thúc đẩy cam kết hoặc thay đổi mã để vượt qua các cổng giai đoạn tự động khác nhau từ môi trường phát triển đến sản xuất, trên các tài khoản AWS.\n"
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/",
	"title": "Triển khai ứng dụng lên EC2 với AWS CodePipeline",
	"tags": [],
	"description": "",
	"content": "Triển khai ứng dụng lên EC2 với AWS CodePipeline Nhiều tổ chức, công ty đã và đang chuyển sang thực hành DevOps, là sự kết hợp của các triết lý, thực tiễn và công cụ văn hóa nhằm tăng khả năng cung cấp ứng dụng và dịch vụ của tổ chức bạn ở tốc độ cao; ví dụ, phát triển và cải tiến sản phẩm với tốc độ nhanh hơn so với các tổ chức sử dụng quy trình quản lý cơ sở hạ tầng và phát triển phần mềm truyền thống.\nMột phần không thể thiếu của DevOps là áp dụng văn hóa tích hợp liên tục và phân phối / triển khai liên tục (CI / CD), trong đó cam kết hoặc thay đổi đối với mã đi qua các cổng giai đoạn tự động khác nhau, tất cả các cách từ xây dựng và thử nghiệm đến triển khai ứng dụng, từ phát triển đến môi trường sản xuất.\nBài lab này sử dụng bộ AWS của các dịch vụ CI / CD để biên dịch, xây dựng và cài đặt ứng dụng Nodejs được kiểm soát theo instance trên một tập hợp các Linux Amazon Elastic Compute Cloud (Amazon EC2) instance thông qua một đường dẫn hoàn toàn tự động và an toàn. Mục tiêu là thúc đẩy cam kết hoặc thay đổi mã để vượt qua các cổng giai đoạn tự động khác nhau từ môi trường phát triển đến sản xuất, trên các tài khoản AWS.\nAWS CodeCommit Dịch vụ kiểm soát nguồn được quản lý đầy đủ lưu trữ các kho lưu trữ dựa trên Git an toàn. CodeCommit giúp các nhóm dễ dàng cộng tác trên mã trong một hệ sinh thái an toàn và có khả năng mở rộng cao. Giải pháp này sử dụng CodeCommit để tạo kho lưu trữ ứng dụng và mã triển khai. AWS CodeBuild Một dịch vụ tích hợp liên tục được quản lý đầy đủ giúp biên dịch mã nguồn, chạy thử nghiệm và sản xuất các gói phần mềm sẵn sàng triển khai trên một máy chủ xây dựng được tạo động. Giải pháp này sử dụng CodeBuild để xây dựng và kiểm tra mã mà chúng tôi triển khai sau này. AWS CodeDeploy Dịch vụ triển khai được quản lý hoàn toàn tự động hóa việc triển khai phần mềm cho nhiều dịch vụ tính toán khác nhau như Amazon EC2, AWS Fargate, AWS Lambda và các máy chủ tại chỗ của bạn. Giải pháp này sử dụng CodeDeploy để triển khai mã hoặc ứng dụng trên một tập hợp các phiên bản EC2 đang chạy các tác nhân CodeDeploy. AWS CodePipeline Dịch vụ phân phối liên tục được quản lý hoàn toàn giúp bạn tự động hóa các đường dẫn phát hành của mình để cập nhật cơ sở hạ tầng và ứng dụng nhanh chóng và đáng tin cậy. Giải pháp này sử dụng CodePipeline để tạo một đường dẫn end-to-end tìm nạp mã ứng dụng từ CodeCommit, xây dựng và thử nghiệm bằng CodeBuild và cuối cùng triển khai bằng CodeDeploy. AWS CloudWatch Events Quy tắc AWS CloudWatch Events được tạo để kích hoạt CodePipeline trên Git cam kết đối với kho lưu trữ CodeCommit. Dịch vụ lưu trữ đơn giản của Amazon (Amazon S3) Dịch vụ lưu trữ đối tượng cung cấp khả năng mở rộng, tính khả dụng của dữ liệu, bảo mật và hiệu suất hàng đầu trong ngành. Giải pháp này sử dụng một thùng S3 để lưu trữ các tạo tác xây dựng và triển khai được tạo trong quá trình chạy đường ống. Dịch vụ quản lý khóa AWS (AWS KMS) AWS KMS giúp bạn dễ dàng tạo và quản lý các khóa mật mã cũng như kiểm soát việc sử dụng chúng trên nhiều loại dịch vụ AWS và trong các ứng dụng của bạn. Giải pháp này sử dụng AWS KMS để đảm bảo rằng các tạo tác xây dựng và triển khai được lưu trữ trên nhóm S3 được mã hóa ở trạng thái nghỉ. Nội dung chính Giới thiệu Các bước chuẩn bị CodeDeploy Agent AWS CodeCommit AWS CodeBuild AWS CodeDeploy AWS CodePipeline Khắc phục lỗi Dọn dẹp tài nguyên "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/2/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Các bước chuẩn bị Chuẩn bị hạ tầng Tạo S3 bucket Tạo Git credentials Tạo Git connection Tạo Service role Tạo IAM user Tạo instance profile Gán role "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/2/2.2/",
	"title": "Tạo S3 bucket",
	"tags": [],
	"description": "",
	"content": "Tạo S3 bucket Chuẩn bị một S3 bucket để lưu trữ build artifact\nTruy cập vào trang S3 Chọn Bucket Chọn Create bucket Trong giao diện Create bucket\nNhập Bucket name Chọn Region Bỏ chọn Block Public Access Kiểm tra lại và chọn Create bucket Sau khi tạo bucket thành công.\nChọn bucket và chọn Permissions Kéo xuống và chọn Edit Bucket policy. Thực hiện điền nội dung policy. { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;ListObjectsInBucket\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:ListBucket\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::aws-cicd-ec2\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;AllObjectActions\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:*Object*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::aws-cicd-ec2/*\u0026#34; } ] } Sau đó chúng ta sẽ thấy S3 bucket được public. "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/3/",
	"title": "CodeDeploy Agent",
	"tags": [],
	"description": "",
	"content": "CodeDeploy Agent (Session Manager) Chúng ta sẽ cài đặt CodeDeploy Agent\nBạn có 2 cách để thực hiện cấu hình CodeDeploy Agent cho EC2 của mình:\nSession Manager Add User Data Truy cập vào EC2\nChọn EC2 mà bạn muốn triển khai ứng dụng. Chọn Connect Sau đó, chúng ta sẽ chuyển đến giao diện connect. Thực hiện các lệnh sau đê cài đặt CodeDeploy Agent REGION=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone/ | sed \u0026#39;s/[a-z]$//\u0026#39;) \u0026amp;\u0026amp; sudo yum update -y \u0026amp;\u0026amp; sudo yum install -y python-pip \u0026amp;\u0026amp; sudo yum install -y ruby \u0026amp;\u0026amp; sudo yum install -y wget \u0026amp;\u0026amp; cd /home/ec2-user wget https://aws-codedeploy-$REGION.s3.amazonaws.com/latest/install \u0026amp;\u0026amp; chmod +x ./install \u0026amp;\u0026amp; sudo ./install auto \u0026amp;\u0026amp; sudo yum remove -y wget \u0026amp;\u0026amp; sudo service codedeploy-agent start Hoàn thành cài CodeDeploy Agent CodeDeploy Agent (Add User Data Cho EC2) Từ khi bắt đầu tạo EC2 Instance bạn có thể thực hiện add user data để tạo CodeDeploy Agent. Nhấn thả Advanced details Nếu muốn bạn có thể thêm IAM Role ngay ở bước này Thực hiện thêm User data\n#!/bin/bash yum -y update yum install -y ruby yum install -y aws-cli cd /home/ec2-user https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install wget chmod +x ./scripts/* ./install auto "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/2/2.3/",
	"title": "Tạo Git credential",
	"tags": [],
	"description": "",
	"content": "Create Git credential To be able to push the code on CodeCommit we need to create a git credential.\nAccess to IAM\nSelect Users Select user that you use In the HTTPS Git credential for AWS CodeCommit section Select Generate credentials Then we will download and use. "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/4/",
	"title": "AWS CodeCommit",
	"tags": [],
	"description": "",
	"content": "Di chuyển các repository từ AWS CodeCommit sang nhà cung cấp khác Vào ngày 25 tháng 7 năm 2024, AWS đã thông báo rằng sản phẩm quản lý mã nguồn (SCM) của họ, CodeCommit, không còn khả dụng cho khách hàng mới.\nKhách hàng có thể di chuyển các repository Git của AWS CodeCommit sang các nhà cung cấp Git khác bằng nhiều phương pháp như sao chép repository, mirroring, hoặc di chuyển các nhánh cụ thể. Bài viết này mô tả một ví dụ cơ bản về việc mirroring repository sang một nhà cung cấp khác và cung cấp liên kết đến các hướng dẫn chi tiết hơn về việc mirroring sang các nhà cung cấp cụ thể. Các bước thực hiện có thể khác nhau tùy thuộc vào loại hoặc độ phức tạp của repository và các quyết định liên quan đến cách thức di chuyển. Bài viết này chỉ mô tả cách di chuyển dữ liệu Git repository, không bao gồm việc xuất các dữ liệu khác từ CodeCommit như pull requests.\nĐiều kiện tiên quyết Trước khi có thể di chuyển repository CodeCommit của bạn sang nhà cung cấp khác, hãy đảm bảo rằng bạn có thông tin đăng nhập và quyền truy cập cần thiết cho cả AWS Management Console và tài khoản nhà cung cấp khác. Để di chuyển sang GitHub và GitLab, hãy sử dụng thông tin đăng nhập tĩnh của CodeCommit như được mô tả trong HTTPS người dùng sử dụng thông tin Git. Nếu bạn chọn sử dụng quy trình di chuyển chung được mô tả dưới đây, bất kỳ loại thông tin đăng nhập nào của CodeCommit đều có thể được sử dụng. Để biết thêm thông tin về việc thiết lập quyền truy cập AWS CodeCommit, xem Thiết lập cho AWS CodeCommit.\nTrong bảng điều khiển AWS CodeCommit, chọn URL clone cho repository bạn sẽ di chuyển. URL clone chính xác (HTTPS, SSH hoặc HTTPS (CRC)) phụ thuộc vào loại thông tin đăng nhập và giao thức mạng mà bạn đã chọn.\nDi chuyển repository AWS CodeCommit của bạn sang GitLab Sử dụng URL clone CodeCommit kết hợp với thông tin đăng nhập Git repository qua HTTPS, làm theo hướng dẫn trong tài liệu của GitLab để nhập mã nguồn từ một repository bằng URL.\nDi chuyển repository AWS CodeCommit của bạn sang GitHub Sử dụng URL clone CodeCommit kết hợp với thông tin đăng nhập Git repository qua HTTPS, làm theo hướng dẫn trong tài liệu của GitHub để nhập mã nguồn.\nDi chuyển repository AWS CodeCommit của bạn sang Bitbucket Cloud Sử dụng URL clone CodeCommit kết hợp với thông tin đăng nhập Git repository qua HTTPS, làm theo hướng dẫn trong bài viết blog của Bitbucket.\nDi chuyển chung sang nhà cung cấp repository khác 1. Clone repository AWS CodeCommit\nClone repository từ AWS CodeCommit về máy của bạn bằng Git. Nếu bạn sử dụng HTTPS, bạn có thể thực hiện bằng lệnh sau:\ngit clone --mirror https://your-aws-repository-url your-aws-repository\nThay thế your-aws-repository-url bằng URL của repository AWS CodeCommit của bạn.\nThay thế your-aws-repository bằng tên cho repository này. Ví dụ:\ngit clone https://git-codecommit.us-east-2.amazonaws.com/v1/repos/MyDemoRepo my-demo-repo\n2. Thiết lập remote repository mới\nChuyển đến thư mục của repository AWS CodeCommit đã clone. Sau đó, thêm URL repository từ nhà cung cấp mới làm remote:\ngit remote add \u0026lt;provider name\u0026gt; \u0026lt;provider-repository-url\u0026gt;\nThay bằng tên nhà cung cấp bạn đã chọn (ví dụ: gitlab).\nThay bằng URL của repository trên nhà cung cấp mới.\n3. Đẩy repository local của bạn lên remote repository mới\nLệnh này sẽ đẩy tất cả các nhánh và tags lên repository của nhà cung cấp mới. Tên nhà cung cấp phải khớp với tên nhà cung cấp từ bước 2.\ngit push \u0026lt;provider name\u0026gt; --mirror\nLưu ý:\nRemote repository nên trống. Remote repository có thể có nhánh bảo vệ không cho phép push mạnh. Trong trường hợp này, hãy vào repository nhà cung cấp mới và tắt bảo vệ nhánh để cho phép push mạnh. 4. Kiểm tra việc di chuyển\nKhi quá trình đẩy hoàn tất, hãy kiểm tra xem tất cả các file, nhánh, và tag đã được di chuyển thành công sang repository mới hay chưa. Bạn có thể làm điều này bằng cách duyệt repository trực tuyến hoặc clone nó về một vị trí khác và kiểm tra cục bộ.\n5. Cập nhật URL Remote\nNếu bạn có kế hoạch tiếp tục làm việc với repository đã di chuyển trên máy local, bạn có thể cập nhật URL remote để trỏ đến repository của nhà cung cấp mới thay vì AWS CodeCommit. Bạn có thể làm điều này bằng lệnh sau:\ngit remote set-url origin \u0026lt;provider-repository-url\u0026gt;\nThay bằng URL của repository trên nhà cung cấp mới.\n6. Cập nhật CI/CD Pipelines và sửa nhánh bảo vệ\nNếu bạn có các CI/CD pipeline tương tác với repository của mình, như GitLab, GitHub hoặc AWS CodePipeline, hãy cập nhật cấu hình của chúng để phản ánh URL repository mới. Nếu bạn đã xóa quyền bảo vệ nhánh trong bước 3, có thể bạn muốn thêm lại chúng cho nhánh chính.\n7. Thông báo cho nhóm của bạn\nNếu bạn đang di chuyển một repository mà người khác đang làm việc, hãy thông báo cho nhóm của bạn về việc di chuyển và cung cấp cho họ URL repository mới.\n8. Xóa repository AWS CodeCommit đã di chuyển\nHành động này không thể hoàn tác. Quay lại bảng điều khiển AWS CodeCommit và xóa repository đã di chuyển bằng nút \u0026ldquo;Delete Repository\u0026rdquo;.\n"
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/2/2.4/",
	"title": "Tạo Git Connection",
	"tags": [],
	"description": "",
	"content": "Tạo kết nối với GitHub (bảng điều khiển) Bạn có thể sử dụng bảng điều khiển để tạo kết nối với GitHub.\nGhi Hiện tại, nếu bạn sử dụng bảng điều khiển để tạo kết nối, điều này sẽ chỉ tạo tài nguyên có trong tài nguyên ARN. Để tạo tài nguyên có tiền tố dịch vụ trong ARN, hãy sử dụng CLI, SDK hoặc CFN. Tài nguyên có cả hai tiền tố dịch vụ sẽ vẫn hiển thị trong bảng điều khiển. Việc tạo tài nguyên bảng điều khiển sẽ có sẵn bắt đầu từ ngày 1 tháng 7 năm 2024.codestar-connections``codeconnections\nĐăng nhập vào Bảng điều khiển quản lý AWS và mở bảng điều khiển Công cụ dành cho nhà phát triển tại đây.\nChọn Thiết đặt \u0026gt; Kết nối, sau đó chọn Tạo kết nối.\nĐể tạo kết nối với kho lưu trữ GitHub hoặc GitHub Enterprise Cloud, bên dưới Chọn nhà cung cấp, chọn GitHub. Trong Tên kết nối, nhập Tên cho kết nối mà bạn muốn tạo. Chọn Kết nối với GitHub và chuyển sang Bước 2.\nĐể tạo kết nối với GitHub Trong cài đặt kết nối GitHub, tên kết nối của bạn xuất hiện trong Tên kết nối. Chọn Kết nối với GitHub. Trang yêu cầu truy cập sẽ xuất hiện.\nChọn Authorize AWS Connector for GitHub. Các trang kết nối hiển thị và hiển thị trường Ứng dụng GitHub.\nTrong Ứng dụng GitHub, chọn cài đặt ứng dụng hoặc chọn Cài đặt ứng dụng mới để tạo ứng dụng.\nBạn cài đặt một ứng dụng cho tất cả các kết nối của bạn với một nhà cung cấp cụ thể. Nếu bạn đã cài đặt ứng dụng AWS Connector for GitHub, hãy chọn nó và bỏ qua bước này.\nGhi Nếu bạn muốn tạo một Mã truy cập người dùng, đảm bảo rằng bạn đã cài đặt AWS Trình kết nối cho ứng dụng GitHub và sau đó để trống trường Cài đặt ứng dụng. CodeConnections sẽ sử dụng mã truy cập người dùng cho kết nối.\nTrên trang Cài đặt AWS Connector cho GitHub, chọn tài khoản mà bạn muốn cài đặt ứng dụng.\nGhi Bạn chỉ cài đặt ứng dụng một lần cho mỗi tài khoản GitHub. Nếu trước đây bạn đã cài đặt ứng dụng, bạn có thể chọn Cấu hình tiến hành đến trang sửa đổi để cài đặt ứng dụng của bạn hoặc bạn có thể sử dụng mặt sau để quay lại bảng điều khiển.\nTrên trang Cài đặt AWS Connector cho GitHub, hãy để lại nút mặc định và chọn Cài đặt.\nSau bước này, một trang quyền cập nhật có thể hiển thị trong GitHub.\nNếu một trang hiển thị hiển thị rằng có các quyền cập nhật cho AWS Trình kết nối cho ứng dụng GitHub, chọn Chấp nhận mới quyền.\nBạn được đưa trở lại trang Connect to GitHub. Các ID kết nối cho cài đặt mới của bạn xuất hiện trong GitHub Ứng dụng. Chọn Kết nối.\nXem bạn đã tạo Kết nối Kết nối đã tạo sẽ hiển thị trong danh sách kết nối.\n"
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/5/",
	"title": "AWS CodeBuild",
	"tags": [],
	"description": "",
	"content": "Chúng tôi sẽ sử dụng repository AWS First Cloud Journey này cho demo. Bạn có thể tải lên github của bạn để sử dụng cho các bước thực hiện tiếp theo khi cần sử dụng kết nối với GitHub.\nAWS CodeBuild Truy cập vào AWS CodeBuild\nChọn Create project Trong giao diện Create build project Project name, nhập AWS-FCJ-APP Cấu hình Source* Demo code này mang tính chất đơn giản cho bạn hiểu rõ những thứ cần thiết cho quá trình build, deploy.\n- Chọn **Source provider** là **Github** - Chọn **Repository** là **PIPELINE** - Chọn **Branch** - Chọn **main** Đối với Environment\nChọn Managed image Chọn Operating system là Amazon Linux 2 Chọn Run time là Standard Chọn Image Chọn kiểu môi trường là Linux Tick chọn vào Enable Privileged. Tạo Service role hoặc chọn Service role bạn đã tạo. Tiếp theo, chúng ta sẽ cấu hình dường đường dẫn Buildspec Đối với Artifact\nChúng ta chọn lưu trữ tại S3 Chọn bucket đã tạo. Đối với Logs\nChúng ta sử dụng CloudWatch logs Group name: aws-cicd-ec2-group Stream name: aws-cicd-ec2-stream Chúng ta đã tạo thành công AWS CodeBuild project. Để kiểm tra cấu hình đã đúng, thử Start build Đợi khoảng 5 phút sau, chọn Phase details để xem quá trình build project. "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/2/2.5/",
	"title": "Tạo Service Role",
	"tags": [],
	"description": "",
	"content": "Tạo Service Role cho CodeDeploy Để thực hiện các bài lab, chúng ta cần tạo Service role cho CodeDeploy\nTruy cập vào IAM\nChọn Create role Thực hiện cấu hình các bước tạo role\nChọn AWS service Chọn CodeDeploy Chọn Next Chọn Next Thực hiện nhập tên và tạo role\nRole name, nhập CodeDeployServiceRoleEC2 Giữ nguyên phần mô tả. Chọn Create role Tạo role thành công. Sau khi tạo role, chúng ta sẽ thực hiện chỉnh sửa Trust relationships Thay bằng nội dung sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: [ \u0026#34;codedeploy.us-east-2.amazonaws.com\u0026#34;, \u0026#34;codedeploy.us-east-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.us-west-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.us-west-2.amazonaws.com\u0026#34;, \u0026#34;codedeploy.eu-west-3.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ca-central-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.eu-west-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.eu-west-2.amazonaws.com\u0026#34;, \u0026#34;codedeploy.eu-central-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ap-east-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ap-northeast-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ap-northeast-2.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ap-southeast-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ap-southeast-2.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ap-south-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.sa-east-1.amazonaws.com\u0026#34; ] }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] } Chọn Update policy "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/6/",
	"title": "AWS CodeDeploy",
	"tags": [],
	"description": "",
	"content": "AWS CodeDeploy Truy cập vào AWS CodeDeploy\nChọn Create application Trong giao diện Create application\nĐối với Application name, nhập AWS-FCJ-APP Đối với Compute platform, chúng ta sẽ chọn EC2/On-Premises Chúng ta sẽ tạo Deployment groups để thực hiện deployment ứng dụng. Thực hiện cấu hình Deployment group\nNhập Deployment group name Nhập Service role Đối với Deployment type\nChúng ta sẽ chọn In-place Đối với môi trường triển khai là Amazon EC2 instances Chọn theo tag group, chọn các key và value phù hợp với EC2 mà bạn muốn dùng triển khai ứng dụng. Đối với cài đặt Install AWS CodeDeploy Agent\nChúng ta sẽ chọn Nerver Đối với Deployment settings, chọn CodeDeployDefault.OneAtATime Chọn Create deployment group Hoàn thành tạo Deployment group Chúng ta sẽ quay lại Applications\nChọn ứng dụng đã chuẩn bị. Chọn Deploy application Chúng ta sẽ cung cấp các thông tin Create deployment\nSử dụng Deployment group Chọn Revision type Và đối với Revision location chọn dẫn của S3 bucket Dạng file sẽ là .zip Kiểm tra lại và chọn Create deployment Sau thời gian khoảng 5 phút. Chúng ta sẽ hoàn thành deployment. Chúng ta sẽ xem lịch sử triển khai. Truy cập vào ứng dụng qua DNS của EC2 thông qua port 5000. Hãy nhớ truy cập đường dẫn với http chứ không phải https\n"
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/2/2.6/",
	"title": "Provision an IAM user",
	"tags": [],
	"description": "",
	"content": "Provision an IAM user Nếu bạn chưa có IAM user thì bạn sẽ tạo 1 IAM user. Sau đó tải Access key về để sử dụng CLI Sau đó chúng ta sẽ tạo policy.\nChúng ta sẽ cấu hình policy như sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;CodeDeployAccessPolicy\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;autoscaling:*\u0026#34;, \u0026#34;codedeploy:*\u0026#34;, \u0026#34;ec2:*\u0026#34;, \u0026#34;lambda:*\u0026#34;, \u0026#34;ecs:*\u0026#34;, \u0026#34;elasticloadbalancing:*\u0026#34;, \u0026#34;iam:AddRoleToInstanceProfile\u0026#34;, \u0026#34;iam:AttachRolePolicy\u0026#34;, \u0026#34;iam:CreateInstanceProfile\u0026#34;, \u0026#34;iam:CreateRole\u0026#34;, \u0026#34;iam:DeleteInstanceProfile\u0026#34;, \u0026#34;iam:DeleteRole\u0026#34;, \u0026#34;iam:DeleteRolePolicy\u0026#34;, \u0026#34;iam:GetInstanceProfile\u0026#34;, \u0026#34;iam:GetRole\u0026#34;, \u0026#34;iam:GetRolePolicy\u0026#34;, \u0026#34;iam:ListInstanceProfilesForRole\u0026#34;, \u0026#34;iam:ListRolePolicies\u0026#34;, \u0026#34;iam:ListRoles\u0026#34;, \u0026#34;iam:PutRolePolicy\u0026#34;, \u0026#34;iam:RemoveRoleFromInstanceProfile\u0026#34;, \u0026#34;s3:*\u0026#34;, \u0026#34;ssm:*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;CodeDeployRolePolicy\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:PassRole\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::account-ID:role/CodeDeployServiceRole\u0026#34; } ] } Chọn Review policy Kiểm tra lại và sau đó nhập tên policy, chọn Create policy "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/7/",
	"title": "AWS CodePipeline",
	"tags": [],
	"description": "",
	"content": "AWS CodePipeline Sau khi sử dụng AWS CodeCommit để đẩy code lên từ máy local, chúng ta thực hiện build qua AWS CodeBuild và sử dụng AWS CodeDeploy để triển khai ứng dụng lên EC2 thì bây giờ chúng ta sẽ sử dụng AWS CodePipeline để tạo quá trình CI/CD triển khai ứng dụng.\nTruy cập vào AWS CodePipeline\nChọn Create pipeline Thực hiện cấu hình AWS CodePipeline\nNhập Pipeline name Tạo một service role cho AWS CodePipeline Chọn Next Đối với phần Advanced settings\nCustom location Chọn bucket Chọn Next Đối với AWS source stage\nChọn AWS CodeCommit đối với Source provider Chọn Repository Đối với Branch name, chọn master Chọn Next Đối với phần build\nChọn Build provider là AWS CodeBuild Chọn Region Chọn Project name mà bạn đã tạo và build. Chọn Next Đối với Deploy stage\nDeploy provider, chọn AWS CodeDeploy Chọn Region Chọn Application namebạn đã tạo. Chọn Deployment group Chọn Next Chọn Create pipeline Sau khi tạo thành công pipeline, bạn sẽ mất khoảng 10 phút để hoàn thành pipeline. Bạn sẽ thử chỉnh sửa code để kiểm tra pipeline.\nBạn truy cập vào code ứng dụng Vào phần layout, chọn file main Chỉnh sửa dòng thứ 17 thành Deploy Application to EC2 with AWS CodePipeline Sau đó thực hiện đẩy code lên AWS CodeCommit Sau 1 phút tiếp theo, chúng ta sẽ hoàn thành pipeline vừa thay đổi code. Thực hiện kiểm tra ứng dụng đã thay đổi\nChúng ta truy cập vào EC2 triển khai Sao chép DNS "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/2/2.7/",
	"title": "Tạo instance profile",
	"tags": [],
	"description": "",
	"content": "Tạo instance profile Chúng ta sẽ tạo IAM instance profile cho Amazon EC2 instance\nTruy cập vào IAM Chọn Policies Chọn Create policy Trong bước tạo policy, nhập nội dung policy { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:Get*\u0026#34;, \u0026#34;s3:List*\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::replace-with-your-s3-bucket-name/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-us-east-2/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-us-east-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-us-west-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-us-west-2/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ca-central-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-eu-west-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-eu-west-2/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-eu-west-3/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-eu-central-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ap-east-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ap-northeast-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ap-northeast-2/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ap-southeast-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ap-southeast-2/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ap-south-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-sa-east-1/*\u0026#34; ] } ] } Chọn Next:Tags Chọn Next:Review\nNhập tên policy và chọn Create policy\nHoàn thành tạo policy. Tiếp đến chúng ta sẽ tạo một role\nTruy cập vào IAM Chọn Roles Chọn Create role Chọn AWS service là EC2. Chọn Next Tìm và chọn policy vừa tạo. Chọn Next 9. Nhập tên role\nChọn Create role Hoàn thành tạo role. "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/2/2.8/",
	"title": "Gán role",
	"tags": [],
	"description": "",
	"content": "Gán role Chúng ta sẽ thực hiện gán role cho EC2 instance.\nTruy cập vào EC2\nChọn EC2 mà bạn sử dụng để triển khai ứng dụng Chọn Actions Chọn Security Tiếp theo chúng ta sẽ chọn Modify IAM role Trong bước Modify IAM role Chọn CodeDeploy-EC2-Instance-Profile Chọn Update IAM role "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/8/",
	"title": "Khắc phục lỗi",
	"tags": [],
	"description": "",
	"content": "Khắc phục lỗi Trong quá trình triển khai bài lab, chúng ta sẽ gặp một ít lỗi. Sau đây là một số trường hợp có thể gặp:\nLỗi xảy ra với AWS CodeCommit Lỗi xảy ra với AWS CodeBuild Lỗi xảy ra với AWS CodeDeploy Lỗi xảy ra với AWS CodePipeline "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/9/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Terminate EC2 instance Truy cập vào EC2 Management Console Ở thanh điều hướng bên trái, chọn Instances Chọn tất cả các EC2 Instance liên quan đến lab. Nhấn Actions. Nhấn Manage Instance State. Chọn Terminate. Nhấn Change State. Delete DB Instance Truy cập vào RDS Management Console Ở thanh điều hướng bên trái, chọn Databases Chọn tất cả DB Instance liên quan đến lab. Nhấn Actions. Nhấn Delete. Bỏ chọn Create final snapshot? và chọn I acknowledge that upon instance deletion, automated backups, including system snapshots and point-in-time recovery, will no longer be available. Nhập delete me vào ô trống. Nhấn Delete. Delete Security Group Truy cập vào EC2 Management Console Ở thanh điều hướng bên trái, chọn Security Groups. Chọn tất cả Security Groups liên quan đến lab. Nhấn Actions. Nhấn Delete security groups. Nhấn Delete. Xóa AWS CodeCommit Repository Xóa AWS CodeCommit Repository\nXóa AWS CodeBuild Project Xóa AWS CodeBuild Project\nXóa AWS CodePipeline Xóa Pipeline\n"
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]