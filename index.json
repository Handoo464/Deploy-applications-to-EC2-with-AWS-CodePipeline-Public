[
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/",
	"title": "Deploy applications to EC2 with AWS CodePipeline",
	"tags": [],
	"description": "",
	"content": "Many organizations and companies have turned to DevOps practices, a combination of philosophies, practices, and cultural tools to increase your organization’s ability to deliver applications and services at high speed. ; for example, develop and improve products at a faster rate than organizations using traditional software development and infrastructure management processes.\nAn integral part of DevOps is adopting a culture of continuous integration and continuous delivery/deployment (CI/CD), where commits or changes to code pass through various automated phase gates. , all the way from building and testing to application deployment, from development to production environments.\nThis lab uses the AWS suite of CI/CD services to compile, build, and install an instance-controlled Nodejs application on a set of Linux Amazon Elastic Compute Cloud (Amazon EC2) instances over a single pipeline. Fully automatic and safe guide. The goal is to drive commits or code changes to pass through various automated stage gates from development to production environments, across AWS accounts.\nAWS CodeCommit – A fully-managed source control service that hosts secure Git-based repositories. CodeCommit makes it easy for teams to collaborate on code in a secure and highly scalable ecosystem. This solution uses CodeCommit to create a repository to store the application and deployment codes. AWS CodeBuild – A fully managed continuous integration service that compiles source code, runs tests, and produces software packages that are ready to deploy, on a dynamically created build server. This solution uses CodeBuild to build and test the code, which we deploy later. AWS CodeDeploy – A fully managed deployment service that automates software deployments to a variety of compute services such as Amazon EC2, AWS Fargate, AWS Lambda, and your on-premises servers. This solution uses CodeDeploy to deploy the code or application onto a set of EC2 instances running CodeDeploy agents. AWS CodePipeline – A fully managed continuous delivery service that helps you automate your release pipelines for fast and reliable application and infrastructure updates. This solution uses CodePipeline to create an end-to-end pipeline that fetches the application code from CodeCommit, builds and tests using CodeBuild, and finally deploys using CodeDeploy. AWS CloudWatch Events – An AWS CloudWatch Events rule is created to trigger the CodePipeline on a Git commit to the CodeCommit repository. Amazon Simple Storage Service (Amazon S3) – An object storage service that offers industry-leading scalability, data availability, security, and performance. This solution uses an S3 bucket to store the build and deployment artifacts created during the pipeline run. AWS Key Management Service (AWS KMS) – AWS KMS makes it easy for you to create and manage cryptographic keys and control their use across a wide range of AWS services and in your applications. This solution uses AWS KMS to make sure that the build and deployment artifacts stored on the S3 bucket are encrypted at rest. Main content Introduction Preparation steps CodeDeploy Agent AWS CodeCommit AWS CodeBuild AWS CodeDeploy AWS CodePipeline Troubleshooting Resource Cleanup "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/1/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview Many organizations and companies have turned to DevOps practices, a combination of philosophies, practices, and cultural tools to increase your organization’s ability to deliver applications and services at high speed. ; for example, develop and improve products at a faster rate than organizations using traditional software development and infrastructure management processes.\nAn integral part of DevOps is adopting a culture of continuous integration and continuous delivery/deployment (CI/CD), where commits or changes to code pass through various automated phase gates. , all the way from building and testing to application deployment, from development to production environments.\nThis lab uses the AWS suite of CI/CD services to compile, build, and install an instance-controlled Nodejs application on a set of Linux Amazon Elastic Compute Cloud (Amazon EC2) instances over a single pipeline. Fully automatic and safe guide. The goal is to drive commits or code changes to pass through various automated stage gates from development to production environments, across AWS accounts.\n"
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/2/2.1/",
	"title": "Preparing the infrastructure",
	"tags": [],
	"description": "",
	"content": "Prepare infrastructure To perform this lab, we need to prepare the following steps to standardize infrastructure such as VPC, Security Group, Database RDS for Application and EC2 instance.\nCreate VPC Create Security Group for EC2 Create Security Group for Database RDS Create Database Subnet Group Create Database Instance Create EC2 instance Connect DB instance You can refer to the preparation steps of the article DOCKER APPLICATION ON DOCKER CONTAINER "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/2/2.2/",
	"title": "Create S3 bucket",
	"tags": [],
	"description": "",
	"content": "Create S3 bucket Prepare an S3 bucket to store build artifact\nGo to S3 page Select Bucket Select Create bucket In the Create bucket interface\nEnter Bucket name Select Region Uncheck Block Public Access Check again and select Create bucket After creating the bucket successfully.\nSelect the bucket and select Permissions Scroll down and select Edit Bucket policy. Fill in the policy content. { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;ListObjectsInBucket\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:ListBucket\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::aws-cicd-ec2\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;AllObjectActions\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:*Object*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::aws-cicd-ec2/*\u0026#34; } ] } Then we will see that the S3 bucket is public. "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/2/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "Preparation steps Preparing the infrastructure Create S3 bucket Generate Git credentials Create Git connection Create Service role Create IAM user Create instance profile Assign role "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/3/",
	"title": "CodeDeploy Agent",
	"tags": [],
	"description": "",
	"content": "CodeDeploy Agent (Session Manager) We will install CodeDeploy Agent\nYou have 2 ways to configure the CodeDeploy Agent for your EC2:\nSession Manager Add User Data Access to EC2\nSelect EC2 to which you want to deploy the application. Select Connect Then we will move to the connecting interface. Execute the following commands to install CodeDeploy Agent REGION=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone/ | sed \u0026#39;s/[a-z]$//\u0026#39;) \u0026amp;\u0026amp; sudo yum update -y \u0026amp;\u0026amp; sudo yum install -y python-pip \u0026amp;\u0026amp; sudo yum install -y ruby \u0026amp;\u0026amp; sudo yum install -y wget \u0026amp;\u0026amp; cd /home/ec2-user wget https://aws-codedeploy-$REGION.s3.amazonaws.com/latest/install \u0026amp;\u0026amp; chmod +x ./install \u0026amp;\u0026amp; sudo ./install auto \u0026amp;\u0026amp; sudo yum remove -y wget \u0026amp;\u0026amp; sudo service codedeploy-agent start Complete installation of CodeDeploy Agent CodeDeploy Agent (Add User Data For EC2) When creating an EC2 Instance, you can add user data to install the CodeDeploy Agent. Click on \u0026ldquo;Advanced details.\u0026rdquo; If you want, you can also add an IAM Role at this step. Proceed to add User data. #!/bin/bash yum -y update yum install -y ruby yum install -y aws-cli cd /home/ec2-user https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install wget chmod +x ./scripts/* ./install auto "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/2/2.3/",
	"title": "Create Git credential",
	"tags": [],
	"description": "",
	"content": "Tạo Git credential Để có thể đẩy code lên trên CodeCommit chúng ta cần tạo một git credential.\nTruy cập vào IAM\nChọn Users Chọn user mà bạn sử dụng Trong phần HTTPS Git credential for AWS CodeCommit Chọn Generate credentials Sau đó, chúng ta sẽ tải về và sử dụng. "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/4/",
	"title": "AWS CodeCommit",
	"tags": [],
	"description": "",
	"content": "On July 25, 2024, AWS announced that their source code management (SCM) product - CodeCommit, is no longer available to new customers.\nCustomers can migrate their AWS CodeCommit Git repositories to other Git providers using several methods, such as cloning the repository, mirroring, or migrating specific branches. This blog describes a basic use case to mirror a repository to a generic provider, and links to instructions for mirroring to more specific providers. Your exact steps could vary depending on the type or complexity of your repository, and the decisions made on what and how you want to migrate. This post only describes how to migrate Git repository data, and does not describe exporting other data from CodeCommit such as pull requests.\nPre-requisites Before you can migrate your CodeCommit repository to another provider, make sure that you have the necessary credentials and permissions to both the AWS Management Console and the other provider’s account. For migrating to GitHub and Gitlab, use CodeCommit static credentials as described in HTTPS users using Git credentials. If you choose to use the generic migration option process described below, any type of CodeCommit credentials can be used. To learn more about setting up AWS CodeCommit access control see Setting up for AWS CodeCommit. In the AWS CodeCommit console, select the clone URL for the repository you will migrate. The correct clone URL (HTTPS, SSH, or HTTPS (CRC)) depends on which credential type and network protocol you have chosen to use. Migrating your AWS CodeCommit repository to a GitLab repository Using the CodeCommit clone URL in combination with the HTTPS Git repository credentials, follow the guidance in GitLab’s documentation for importing source code from a repository by URL.\nMigrating your AWS CodeCommit repository to a GitHub repository Using the CodeCommit clone URL in combination with the HTTPS Git repository credentials, follow the guidance in GitHub’s documentation for importing source code.\nMigrating your AWS CodeCommit repository to a Bitbucket Cloud repository Using the CodeCommit clone URL in combination with the HTTPS Git repository credentials, follow the instructions provided in Bitbucket’s blog post.\nGeneric migration to a different repository provider 1. Clone the AWS CodeCommit Repository\nClone the repository from AWS CodeCommit to your local machine using Git. If you’re using HTTPS, you can do this by running the following command:\ngit clone --mirror https://your-aws-repository-url your-aws-repository\nReplace your-aws-repository-url with the URL of your AWS CodeCommit repository.\nReplace your-aws-repository with a name for this repository. Example:\ngit clone https://git-codecommit.us-east-2.amazonaws.com/v1/repos/MyDemoRepo my-demo-repo\n2. Set up new remote repository\nNavigate to the directory of your cloned AWS CodeCommit repository. Then, add the repository URL from the new repository provider as a remote:\ngit remote add \u0026lt;provider name\u0026gt; \u0026lt;provider-repository-url\u0026gt;\nReplace with the provider name of your choice. (Example: gitlab)\nReplace with the URL of your new repository provider’s repository.\n3. Push your local repository to the new remote repository\nThis will push all branches and tags to your new repository provider’s repository. The provider name must match the provider name from step 2.\ngit push \u0026lt;provider name\u0026gt; --mirror\nNotes:\nThe remote repository should be empty The remote repository may have protected branches not allowing force push. In this case, navigate to your new repository provider and disable branch protections to allow force push. 4. Verify the Migration\nOnce the push is complete, verify that all files, branches, and tags have been successfully migrated to the new repository provider. You can do this by browsing your repository online or by cloning it to another location and checking it locally.\n5. Update Remote URLs\nIf you plan to continue working with the migrated repository locally, you may want to update the remote URL to point to the new provider’s repository instead of AWS CodeCommit. You can do this using the following command:\ngit remote set-url origin \u0026lt;provider-repository-url\u0026gt;\nReplace with the URL of your new repository provider’s repository.\n6. Update CI/CD Pipelines and fix protected branches\nIf you have CI/CD pipelines set up that interact with your repository, such as GitLab, GitHub or AWS CodePipeline, update their configuration to reflect the new repository URL. If you removed protected branch permissions in Step 3 you may want to add these back to your main branch.\n7. Inform Your Team\nIf you’re migrating a repository that others are working on, be sure to inform your team about the migration and provide them with the new repository URL.\n8. Delete the, now migrated, AWS CodeCommit repository\nThis action cannot be undone. Navigate back to the AWS CodeCommit console and delete the repository that you have migrated using the “Delete Repository” button.\n"
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/2/2.4/",
	"title": "Create Git Conection",
	"tags": [],
	"description": "",
	"content": "Create a connection to GitHub (console) You can use the console to create a connection to GitHub.\nNote Currently, if you use the console to create a connection, this will only create resources with codestar-connections in the resource ARN. To create a resource that will have the codeconnections service prefix in the ARN, use the CLI, SDK, or CFN. Resources with both service prefixes will still display in the console. Console resource creation will be available beginning July 1, 2024.\nSign in to the AWS Management Console, and open the Developer Tools console at https://console.aws.amazon.com/codesuite/settings/connections.\nChoose Settings \u0026gt; Connections, and then choose Create connection.\nTo create a connection to a GitHub or GitHub Enterprise Cloud repository, under Select a provider, choose GitHub. In Connection name, enter the name for the connection that you want to create. Choose Connect to GitHub, and proceed to Step 2.\nTo create a connection to GitHub Under GitHub connection settings, your connection name appears in Connection name. Choose Connect to GitHub. The access request page appears.\nChoose Authorize AWS Connector for GitHub. The connection page displays and shows the GitHub Apps field.\nUnder GitHub Apps, choose an app installation or choose Install a new app to create one.\nYou install one app for all of your connections to a particular provider. If you have already installed the AWS Connector for GitHub app, choose it and skip this step.\nNote If you want to create a user access token, make sure that you\u0026rsquo;ve already installed the AWS Connector for GitHub app and then leave the App installation field empty. CodeConnections will use the user access token for the connection.\nOn the Install AWS Connector for GitHub page, choose the account where you want to install the app.\nNote You only install the app once for each GitHub account. If you previously installed the app, you can choose Configure to proceed to a modification page for your app installation, or you can use the back button to return to the console.\nOn the Install AWS Connector for GitHub page, leave the defaults, and choose Install.\nAfter this step, an updated permissions page might display in GitHub.\nIf a page displays showing that there are updated permissions for the AWS Connector for GitHub app, choose Accept new permissions.\nYou are returned to the Connect to GitHub page. The connection ID for your new installation appears in GitHub Apps. Choose Connect.\nView your created connection The created connection displays in the connections list.\n"
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/5/",
	"title": "AWS CodeBuild",
	"tags": [],
	"description": "",
	"content": "We will use the AWS First Cloud Journey repository for this demo. You can upload it to your own GitHub repository for use in the following steps when connecting with GitHub is required.\nAWS CodeBuild Setup Access AWS CodeBuild\nClick on Create project In the Create build project interface For Project name, enter AWS-FCJ-APP Configure the Source This demo code is simplified to help you understand the essentials of the build and deploy process.\n- Select **Source provider** as **GitHub** - Choose **Repository** as **PIPELINE** - Choose **Branch** - Select **main** For the Environment\nSelect Managed image Choose Operating system as Amazon Linux 2 Select Run time as Standard Choose Image Set the environment type to Linux Check Enable Privileged mode. Create a Service role or select an existing Service role that you have already created. Next, we will configure the Buildspec path. For the Artifact\nWe will store it in S3 Select the bucket that you have created. For the Logs\nWe will use CloudWatch logs Group name: aws-cicd-ec2-group Stream name: aws-cicd-ec2-stream We have successfully created the AWS CodeBuild project. To verify that the configuration is correct, try Start build. Wait for about 5 minutes, then select Phase details to view the project build process. "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/2/2.5/",
	"title": "Create Service Role",
	"tags": [],
	"description": "",
	"content": "Create Service Role for CodeDeploy To do the labs, we need to create Service role for CodeDeploy\nAccess to IAM\nSelect Create role Configure the role creation steps\nSelect AWS service Select CodeDeploy Select Next Select Next Enter a name and create a role\nRole name, enter CodeDeployServiceRoleEC2 Keep the description intact. Select Create role Create a successful role. After creating the role, we will edit Trust relationships Replace with the following content: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: [ \u0026#34;codedeploy.us-east-2.amazonaws.com\u0026#34;, \u0026#34;codedeploy.us-east-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.us-west-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.us-west-2.amazonaws.com\u0026#34;, \u0026#34;codedeploy.eu-west-3.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ca-central-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.eu-west-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.eu-west-2.amazonaws.com\u0026#34;, \u0026#34;codedeploy.eu-central-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ap-east-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ap-northeast-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ap-northeast-2.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ap-southeast-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ap-southeast-2.amazonaws.com\u0026#34;, \u0026#34;codedeploy.ap-south-1.amazonaws.com\u0026#34;, \u0026#34;codedeploy.sa-east-1.amazonaws.com\u0026#34; ] }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] } Select Update policy "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/6/",
	"title": "AWS CodeDeploy",
	"tags": [],
	"description": "",
	"content": "AWS CodeDeploy Access to AWS CodeDeploy\nSelect Create application In the Create application interface\nFor Application name, enter AWS-FCJ-APP For Compute platform, we will choose EC2/On-Premises We will create Deployment groups to implement the application deployment. Configure Deployment group\nEnter Deployment group name Enter Service role For Deployment type\nWe will choose In-place For deployment environment is Amazon EC2 instances Select by tag group, select the keys and values ​​suitable for EC2 that you want to use to deploy the application. For installation Install AWS CodeDeploy Agent\nWe will choose Nerver For Deployment settings, select CodeDeployDefault.OneAtATime Select Create deployment group Finish creating Deployment group We will return to Applications\nSelect the prepared application. Select Deploy application We will provide Create deployment information\nUse Deployment group Select Revision type And for Revision location choose the lead of S3 bucket File format will be .zip Double check and select Create deployment After a period of about 5 minutes. We will complete the deployment. We’ll take a look at the deployment history. Access the application via DNS of EC2 via https://ec2-18-141-13-141.ap-southeast-1.compute.amazonaws.com/. Remember to access the link with http instead of https\n"
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/2/2.6/",
	"title": "Provision an IAM user",
	"tags": [],
	"description": "",
	"content": "Provision an IAM user If you do not have an IAM user, you will create an IAM user. Then download Access key to use CLI Then we will create policy.\nWe will configure the policy as follows: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;CodeDeployAccessPolicy\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;autoscaling:*\u0026#34;, \u0026#34;codedeploy:*\u0026#34;, \u0026#34;ec2:*\u0026#34;, \u0026#34;lambda:*\u0026#34;, \u0026#34;ecs:*\u0026#34;, \u0026#34;elasticloadbalancing:*\u0026#34;, \u0026#34;iam:AddRoleToInstanceProfile\u0026#34;, \u0026#34;iam:AttachRolePolicy\u0026#34;, \u0026#34;iam:CreateInstanceProfile\u0026#34;, \u0026#34;iam:CreateRole\u0026#34;, \u0026#34;iam:DeleteInstanceProfile\u0026#34;, \u0026#34;iam:DeleteRole\u0026#34;, \u0026#34;iam:DeleteRolePolicy\u0026#34;, \u0026#34;iam:GetInstanceProfile\u0026#34;, \u0026#34;iam:GetRole\u0026#34;, \u0026#34;iam:GetRolePolicy\u0026#34;, \u0026#34;iam:ListInstanceProfilesForRole\u0026#34;, \u0026#34;iam:ListRolePolicies\u0026#34;, \u0026#34;iam:ListRoles\u0026#34;, \u0026#34;iam:PutRolePolicy\u0026#34;, \u0026#34;iam:RemoveRoleFromInstanceProfile\u0026#34;, \u0026#34;s3:*\u0026#34;, \u0026#34;ssm:*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;CodeDeployRolePolicy\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:PassRole\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::account-ID:role/CodeDeployServiceRole\u0026#34; } ] } Select Review policy Check again and then enter the policy name, select Create policy "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/7/",
	"title": "AWS CodePipeline",
	"tags": [],
	"description": "",
	"content": "AWS CodePipeline After using AWS CodeCommit to push the code from the local machine, we build through AWS CodeBuild and use AWS CodeDeploy to deploy the application to EC2 then we will now use AWS CodePipeline to create the CI/CD process to deploy the application.\nAccess to AWS CodePipeline\nSelect Create pipeline Configure AWS CodePipeline\nEnter Pipeline name Create a service role for AWS CodePipeline Select Next For the Advanced settings section\nCustom location Select bucket Select Next For AWS source stage\nSelect AWS CodeCommit for Source provider Select Repository For Branch name, select master Select Next For the build\nSelect Build provider as AWS CodeBuild Select Region Select Project name that you created and build. Select Next For Deploy stage\nDeploy provider, select AWS CodeDeploy Select Region Select Application name you created. Select Deployment group Select Next Select Create pipeline After successfully creating the pipeline, it will take you about 10 minutes to complete the pipeline. You will try editing the code to test the pipeline.\nYou access the application code Go to index.html, edit line 31 with \u0026ldquo;!!!\u0026rdquo; Then commit chages After the next 1 minutes, we will finish the pipeline we just changed the code. Perform a changed application check\nWe access EC2 deployment Copy DNS "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/2/2.7/",
	"title": "Create instance profile",
	"tags": [],
	"description": "",
	"content": "Create instance profile We will create IAM instance profile for Amazon EC2 instance\nAccess to IAM Select Policies Select Create policy In the step of creating policy, enter the content policy { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:Get*\u0026#34;, \u0026#34;s3:List*\u0026#34; ], \u0026#34;Resources\u0026#34;: [ \u0026#34;arn:aws:s3:::replace-with-your-s3-bucket-name/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-us-east-2/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-us-east-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-us-west-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-us-west-2/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ca-central-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-eu-west-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-eu-west-2/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-eu-west-3/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-eu-central-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ap-east-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ap-northeast-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ap-northeast-2/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ap-southeast-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ap-southeast-2/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-ap-south-1/*\u0026#34;, \u0026#34;arn:aws:s3:::aws-codedeploy-sa-east-1/*\u0026#34; ] } ] } Select Next:Tags Select Next:Review\nEnter policy and select Create policy\n5. Complete policy creation.\n6. Next we will create a role\n- Access to **IAM** - Select **Roles** - Select **Create role** Select AWS service as EC2. Select Next Find and select the newly created policy. Select Next Enter the name role\nSelect Create role\nComplete role creation. "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/2/2.8/",
	"title": "Attach role",
	"tags": [],
	"description": "",
	"content": "Attach roles We will perform role assignment to EC2 instance.\nAccess to EC2\nSelect EC2 which you use to deploy the application Select Actions Select Security Next we will choose Modify IAM role In Modify IAM role step Select CodeDeploy-EC2-Instance-Profile Select Update IAM role "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/8/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "",
	"content": "Troubleshooting Errors During the lab deployment process, you may encounter some issues. Below are some common cases and their solutions:\nErrors with AWS CodeCommit Errors with AWS CodeBuild Errors with AWS CodeDeploy Errors with AWS CodePipeline "
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/9/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clean up resources Terminate EC2 instance Access EC2 Management Console On the left navigation bar, select Intances Select all EC2 Instance related to the lab. Click Actions. Click Manage Instance State. Select Terminate. Click Change State Delete Security Group Access EC2 Management Console On the left navigation bar, select Security Groups Select all Security Groups related to the lab. Click Actions. Click Delete security groups Click Delete Remove AWS CodeBuild Project Delete AWS CodeBuild Project\nRemove AWS CodePipeline Delete Pipeline\n"
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://Handoo464.github.io/Deploy-applications-to-EC2-with-AWS-CodePipeline/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]